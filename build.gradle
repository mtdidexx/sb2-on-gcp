buildscript {
	ext {
		springBootVersion = '2.0.4.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

plugins {
    id 'java'
    id 'org.sonarqube' version '2.6.2'
    id 'org.ajoberstar.grgit' version '1.5.1' // a more groovy way of interacting with git
}

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

ext {
    deployVersion = 1

    // set deploy version to Jenkins build id, if available.
    if (project.hasProperty("build_id")) {
        deployVersion = "${build_id.value}"
    } else {
        def date = new Date()
        def formattedDate = date.format('yyyyMMddHHmmss')
        deployVersion = formattedDate
    }

    //jenkins does a checkout which detaches, so we can't figure out the branch and it has to be passed in
    branch = project.hasProperty('branch') ? branch : grgit.branch.current.name
}

group = 'net.katrinka'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
	maven { url "https://repo.spring.io/milestone" }
}


ext {
	springCloudGcpVersion = '1.0.0.RC1'
	springCloudVersion = 'Finchley.RELEASE'
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-actuator')
//	compile('org.springframework.boot:spring-boot-starter-data-rest')
//	compile('org.springframework.boot:spring-boot-starter-jdbc')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.springframework.cloud:spring-cloud-starter-config')
	compile('org.springframework.cloud:spring-cloud-gcp-starter')
	runtime('org.postgresql:postgresql')
	compileOnly('org.projectlombok:lombok')
	testCompile('org.springframework.boot:spring-boot-starter-test')
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-gcp-dependencies:${springCloudGcpVersion}"
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

sonarqube {
    properties {
        property "sonar.branch", project.branch
        property "sonar.projectVersion", project.deployVersion
    }
}